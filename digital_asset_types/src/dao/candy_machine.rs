//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "candy_machine"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: Vec<u8>,
    pub features: Option<i64>,
    pub authority: Vec<u8>,
    pub mint_authority: Option<Vec<u8>>,
    pub wallet: Option<Vec<u8>>,
    pub token_mint: Option<Vec<u8>>,
    pub items_redeemed: i64,
    pub candy_guard_pda: Option<Vec<u8>>,
    pub collection_mint: Option<Vec<u8>>,
    pub allow_thaw: Option<bool>,
    pub frozen_count: Option<i64>,
    pub mint_start: Option<i64>,
    pub freeze_time: Option<i64>,
    pub freeze_fee: Option<i64>,
    pub version: i16,
    pub created_at: Option<DateTimeUtc>,
    pub last_minted: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Features,
    Authority,
    MintAuthority,
    Wallet,
    TokenMint,
    ItemsRedeemed,
    CandyGuardPda,
    CollectionMint,
    AllowThaw,
    FrozenCount,
    MintStart,
    FreezeTime,
    FreezeFee,
    Version,
    CreatedAt,
    LastMinted,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    CandyMachineData,
    CandyMachineCreators,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Binary.def(),
            Self::Features => ColumnType::BigInteger.def().null(),
            Self::Authority => ColumnType::Binary.def(),
            Self::MintAuthority => ColumnType::Binary.def().null(),
            Self::Wallet => ColumnType::Binary.def().null(),
            Self::TokenMint => ColumnType::Binary.def().null(),
            Self::ItemsRedeemed => ColumnType::BigInteger.def(),
            Self::CandyGuardPda => ColumnType::Binary.def().null(),
            Self::CollectionMint => ColumnType::Binary.def().null(),
            Self::AllowThaw => ColumnType::Boolean.def().null(),
            Self::FrozenCount => ColumnType::BigInteger.def().null(),
            Self::MintStart => ColumnType::BigInteger.def().null(),
            Self::FreezeTime => ColumnType::BigInteger.def().null(),
            Self::FreezeFee => ColumnType::BigInteger.def().null(),
            Self::Version => ColumnType::SmallInteger.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::LastMinted => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

// TODO bring sql generated files to parity with this one that works correctly

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::CandyMachineData => Entity::has_one(super::candy_machine_data::Entity).into(),
            Self::CandyMachineCreators => {
                Entity::has_many(super::candy_machine_creators::Entity).into()
            }
        }
    }
}

impl Related<super::candy_machine_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CandyMachineData.def()
    }
}

impl Related<super::candy_machine_creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CandyMachineCreators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
