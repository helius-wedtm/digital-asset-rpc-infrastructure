//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "candy_machine_core"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub candy_machine_data_id: i64,
    pub features: u64,
    pub authority: Vec<u8>,
    pub mint_authority: Vec<u8>,
    pub collection_mint: Vec<u8>,
    pub items_redeemed: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    CandyMachineDataId,
    Features,
    Authority,
    MintAuthority,
    CollectionMint,
    ItemsRedeemed,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        true
    }
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::CandyMachineDataId => ColumnType::BigInteger.def(),
            Self::Features => ColumnType::Integer.def(),
            Self::Authority => ColumnType::Binary.def(),
            Self::MintAuthority => ColumnType::Binary.def(),
            Self::CollectionMint => ColumnType::Binary.def(),
            Self::ItemsRedeemed => ColumnType::Integer.def(),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
